)
# menampilkan dataset
head(enso)
head(enso2)
# validasi hasil normalisasi (uji korelasi)
corr_enso <- round(cor(enso[2:4], method = "pearson"),4)
corr_enso_norm <- round(cor(enso[2:4], method = "pearson"),4)
# visualisasi uji pearson (heatmap)
plot_enso = ggcorrplot(corr_enso, lab = TRUE) + ggtitle(label = "Data Sebelum Normalisasi")
plot_enso_norm = ggcorrplot(corr_enso_norm, lab = TRUE) + ggtitle(label = "Data Setelah Normalisasi")
grid.arrange(plot_enso, plot_enso_norm, nrow = 1)
grid.arrange(plot_enso, plot_enso_norm, nrow = 1)
# visualisasi scatter plot time series belum memperhatikan pola musiman dan autokorelasi
# Data time series SST Nina 3.4
ggplot(data = enso2, aes(x = tahun, y = sst)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SST Nina 3.4') +
labs(title="Time Series Index SST Nina 3.4", subtitle="https://www.cpc.ncep.noaa.gov/data/indices/sstoi.indices") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Data time series SOI
ggplot(data = enso2, aes(x = tahun, y = soi)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SOI') +
labs(title="Time Series Index SOI", subtitle="http://www.bom.gov.au/climate/current/soihtm1.shtml") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Data time series ONI
ggplot(data = enso2, aes(x = tahun, y = oni)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index ONI') +
labs(title="Time Series Index ONI", subtitle="https://origin.cpc.ncep.noaa.gov/products/analysis_monitoring/ensostuff/ONI_v5.php") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# visualisasi scatter plot time series belum memperhatikan pola musiman dan autokorelasi
# Data time series SST Nina 3.4
ggplot(data = enso2, aes(x = tahun, y = sst)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SST Nina 3.4') +
labs(title="Time Series Index SST Nina 3.4", subtitle="https://www.cpc.ncep.noaa.gov/data/indices/sstoi.indices") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
library(readxl) # I/0 dataset excel
library(ggplot2) # visualisasi data
library(ggcorrplot) # visualisasi data untuk uji korelasi
library(gridExtra) # nested visulasisasi data
library(astsa) # lib autokorelasi dan autokorelasi parsial
theme_set(theme_bw())
iris
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tahun = as.Date(enso$tahun, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni)
)
# fungsi normalisasi data
normalize <- function(x) {
if(is.numeric(x)) {
x = (x - min(x)) / (max(x) - min(x))
} else{
print("Inputan data harus numerik")
}
return(x)
}
# konversi value menjadi bentuk normalisasi max-min (1-0)
enso2 <- data.frame(
# cara praktis
# lapply(enso[2:4], normalize)
tahun = enso$tahun,
sst = round(normalize(enso$sst),4),
soi = round(normalize(enso$soi),4),
oni = round(normalize(enso$oni),4)
)
enso2
# menampilkan dataset
head(enso)
# membaca dataset
enso <- read_excel("../dataset/dataset tesis/enso_fix.xlsx", sheet = "enso")
iris
# membaca dataset
enso <- read_excel("../dataset/dataset tesis/enso_fix.xlsx", sheet = "enso")
# membaca dataset
enso <- read_excel("../dataset/dataset tesis/dataset_enso.xlsx", sheet = "enso")
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tahun = as.Date(enso$tahun, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni)
)
# fungsi normalisasi data
normalize <- function(x) {
if(is.numeric(x)) {
x = (x - min(x)) / (max(x) - min(x))
} else{
print("Inputan data harus numerik")
}
return(x)
}
# konversi value menjadi bentuk normalisasi max-min (1-0)
enso2 <- data.frame(
# cara praktis
# lapply(enso[2:4], normalize)
tahun = enso$tahun,
sst = round(normalize(enso$sst),4),
soi = round(normalize(enso$soi),4),
oni = round(normalize(enso$oni),4)
)
enso2
# menampilkan dataset
head(enso)
head(enso2)
# validasi hasil normalisasi (uji korelasi)
corr_enso <- round(cor(enso[2:4], method = "pearson"),4)
corr_enso_norm <- round(cor(enso[2:4], method = "pearson"),4)
# visualisasi uji pearson (heatmap)
plot_enso = ggcorrplot(corr_enso, lab = TRUE) + ggtitle(label = "Data Sebelum Normalisasi")
plot_enso_norm = ggcorrplot(corr_enso_norm, lab = TRUE) + ggtitle(label = "Data Setelah Normalisasi")
grid.arrange(plot_enso, plot_enso_norm, nrow = 1)
# visualisasi scatter plot time series belum memperhatikan pola musiman dan autokorelasi
# Data time series SST Nina 3.4
ggplot(data = enso2, aes(x = tahun, y = sst)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SST Nina 3.4') +
labs(title="Time Series Index SST Nina 3.4", subtitle="https://www.cpc.ncep.noaa.gov/data/indices/sstoi.indices") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Data time series SOI
ggplot(data = enso2, aes(x = tahun, y = soi)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SOI') +
labs(title="Time Series Index SOI", subtitle="http://www.bom.gov.au/climate/current/soihtm1.shtml") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Data time series ONI
ggplot(data = enso2, aes(x = tahun, y = oni)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index ONI') +
labs(title="Time Series Index ONI", subtitle="https://origin.cpc.ncep.noaa.gov/products/analysis_monitoring/ensostuff/ONI_v5.php") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# membaca dataset
enso <- read_excel("../dataset/dataset tesis/dataset_enso.xlsx", sheet = "enso")
head(enso2)
View(enso)
View(enso2)
# membaca dataset
enso <- read_excel("../dataset/dataset tesis/dataset.xlsx", sheet = "dataset")
enso
View(enso)
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tanggal = as.Date(enso$tahun, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni),
hotspot = as.numeric(enso$hotspot)
)
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tanggal = as.Date(enso$tanggal, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni),
hotspot = as.numeric(enso$hotspot)
)
enso
View(enso)
# fungsi normalisasi data
normalize <- function(x) {
if(is.numeric(x)) {
x = (x - min(x)) / (max(x) - min(x))
} else{
print("Inputan data harus numerik")
}
return(x)
}
# konversi value menjadi bentuk normalisasi max-min (1-0)
enso2 <- data.frame(
# cara praktis
# lapply(enso[2:4], normalize)
tanggal = enso$tanggal,
sst = round(normalize(enso$sst),4),
soi = round(normalize(enso$soi),4),
oni = round(normalize(enso$oni),4),
hotspot = round(normalize(enso$hotspot),4)
)
enso2
View(enso2)
# Pustaka yang digunakan
library(dplyr) # memanipulasi data
library(readxl) # I/0 dataset excel
library(ggplot2) # visualisasi data
library(ggcorrplot) # visualisasi data untuk uji korelasi
library(gridExtra) # nested visulasisasi data
library(astsa) # lib autokorelasi dan autokorelasi parsial
theme_set(theme_bw())
# membaca dataset
enso <- read_excel("../dataset/dataset tesis/dataset_enso.xlsx", sheet = "enso")
# membaca dataset
enso <- read_excel("D:/Belajar Python/dataset/dataset tesis/dataset enso/dataset_enso.xlsx", sheet = "enso")
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tahun = as.Date(enso$tahun, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni)
)
# fungsi normalisasi data
normalize <- function(x) {
if(is.numeric(x)) {
x = (x - min(x)) / (max(x) - min(x))
} else{
print("Inputan data harus numerik")
}
return(x)
}
# konversi value menjadi bentuk normalisasi max-min (1-0)
enso2 <- data.frame(
# cara praktis
# lapply(enso[2:4], normalize)
tahun = enso$tahun,
sst = round(normalize(enso$sst),4),
soi = round(normalize(enso$soi),4),
oni = round(normalize(enso$oni),4)
)
enso2
# menampilkan dataset
head(enso)
head(enso2)
# validasi hasil normalisasi (uji korelasi)
corr_enso <- round(cor(enso[2:4], method = "pearson"),4)
corr_enso_norm <- round(cor(enso[2:4], method = "pearson"),4)
# visualisasi uji pearson (heatmap)
plot_enso = ggcorrplot(corr_enso, lab = TRUE) + ggtitle(label = "Data Sebelum Normalisasi")
plot_enso_norm = ggcorrplot(corr_enso_norm, lab = TRUE) + ggtitle(label = "Data Setelah Normalisasi")
grid.arrange(plot_enso, plot_enso_norm, nrow = 1)
# visualisasi scatter plot time series belum memperhatikan pola musiman dan autokorelasi
# Data time series SST Nina 3.4
ggplot(data = enso2, aes(x = tahun, y = sst)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SST Nina 3.4') +
labs(title="Time Series Index SST Nina 3.4", subtitle="https://www.cpc.ncep.noaa.gov/data/indices/sstoi.indices") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Data time series SOI
ggplot(data = enso2, aes(x = tahun, y = soi)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SOI') +
labs(title="Time Series Index SOI", subtitle="http://www.bom.gov.au/climate/current/soihtm1.shtml") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Data time series ONI
ggplot(data = enso2, aes(x = tahun, y = oni)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index ONI') +
labs(title="Time Series Index ONI", subtitle="https://origin.cpc.ncep.noaa.gov/products/analysis_monitoring/ensostuff/ONI_v5.php") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Visualisasi data dengan fungsi autokorelasi
acf(enso2$sst, main="Index SST Nina 3.4")
acf(enso2$soi, main="Index SOI")
acf(enso2$oni, main="Index ONI")
# Visualisasi data dengan fungsi autokorelasi
acf(enso2$sst, main="Index SST Nina 3.4")
acf(enso2$soi, main="Index SOI")
acf(enso2$oni, main="Index ONI")
# Visualisasi data dengan fungsi autokorelasi parsial
pacf(enso2$sst, main="Index SST Nina 3.4")
pacf(enso2$soi, main="Index SOI")
# Pustaka yang digunakan
library(dplyr) # memanipulasi data
# Pustaka yang digunakan
library(dplyr) # memanipulasi data
library(readxl) # I/0 dataset excel
library(ggplot2) # visualisasi data
library(ggplot2) # visualisasi data
library(ggcorrplot) # visualisasi data untuk uji korelasi
library(gridExtra) # nested visulasisasi data
library(astsa) # lib autokorelasi dan autokorelasi parsial
theme_set(theme_bw())
# Pustaka yang digunakan
library(dplyr) # memanipulasi data
library(readxl) # I/0 dataset excel
library(ggplot2) # visualisasi data
library(ggcorrplot) # visualisasi data untuk uji korelasi
library(gridExtra) # nested visulasisasi data
library(astsa) # lib autokorelasi dan autokorelasi parsial
theme_set(theme_bw())
# membaca dataset
enso <- read_excel("D:/Belajar Python/dataset/dataset tesis/dataset enso/dataset_enso.xlsx", sheet = "enso")
# membaca dataset
enso <- read_excel("D:/Belajar Python/dataset/dataset tesis/dataset enso/dataset_enso.xlsx", sheet = "enso")
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tahun = as.Date(enso$tahun, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni)
)
View(enso)
View(enso)
# membaca dataset
enso <- read_excel("D:/Belajar Python/dataset/dataset tesis/dataset enso/dataset_enso.xlsx", sheet = "enso")
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tahun = as.Date(enso$tahun, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni)
)
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tanggal = as.Date(enso$tanggal, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni)
)
# fungsi normalisasi data
normalize <- function(x) {
if(is.numeric(x)) {
x = (x - min(x)) / (max(x) - min(x))
} else{
print("Inputan data harus numerik")
}
return(x)
}
# konversi value menjadi bentuk normalisasi max-min (1-0)
enso2 <- data.frame(
# cara praktis
# lapply(enso[2:4], normalize)
tahun = enso$tahun,
sst = round(normalize(enso$sst),4),
soi = round(normalize(enso$soi),4),
oni = round(normalize(enso$oni),4)
)
# konversi value menjadi bentuk normalisasi max-min (1-0)
enso2 <- data.frame(
# cara praktis
# lapply(enso[2:4], normalize)
tanggal = enso$tanggal,
sst = round(normalize(enso$sst),4),
soi = round(normalize(enso$soi),4),
oni = round(normalize(enso$oni),4)
)
enso2
# menampilkan dataset
head(enso)
head(enso2)
# validasi hasil normalisasi (uji korelasi)
corr_enso <- round(cor(enso[2:4], method = "pearson"),4)
corr_enso_norm <- round(cor(enso[2:4], method = "pearson"),4)
# Pustaka yang digunakan
library(dplyr) # memanipulasi data
library(readxl) # I/0 dataset excel
library(ggplot2) # visualisasi data
library(ggcorrplot) # visualisasi data untuk uji korelasi
library(gridExtra) # nested visulasisasi data
library(astsa) # lib autokorelasi dan autokorelasi parsial
theme_set(theme_bw())
# membaca dataset
enso <- read_excel("D:/Belajar Python/dataset/dataset tesis/dataset enso/dataset_enso.xlsx", sheet = "enso")
# mengkonversi tipe data menjadi time series dan numerik
enso <- data.frame(
tanggal = as.Date(enso$tanggal, format = "%Y/%m/%d"),
sst = as.numeric(enso$sst),
soi = as.numeric(enso$soi),
oni = as.numeric(enso$oni)
)
# fungsi normalisasi data
normalize <- function(x) {
if(is.numeric(x)) {
x = (x - min(x)) / (max(x) - min(x))
} else{
print("Inputan data harus numerik")
}
return(x)
}
# konversi value menjadi bentuk normalisasi max-min (1-0)
enso2 <- data.frame(
# cara praktis
# lapply(enso[2:4], normalize)
tanggal = enso$tanggal,
sst = round(normalize(enso$sst),4),
soi = round(normalize(enso$soi),4),
oni = round(normalize(enso$oni),4)
)
enso2
# menampilkan dataset
head(enso)
head(enso2)
# validasi hasil normalisasi (uji korelasi)
corr_enso <- round(cor(enso[2:4], method = "pearson"),4)
corr_enso_norm <- round(cor(enso[2:4], method = "pearson"),4)
# visualisasi uji pearson (heatmap)
plot_enso = ggcorrplot(corr_enso, lab = TRUE) + ggtitle(label = "Data Sebelum Normalisasi")
plot_enso_norm = ggcorrplot(corr_enso_norm, lab = TRUE) + ggtitle(label = "Data Setelah Normalisasi")
grid.arrange(plot_enso, plot_enso_norm, nrow = 1)
# visualisasi scatter plot time series belum memperhatikan pola musiman dan autokorelasi
# Data time series SST Nina 3.4
ggplot(data = enso2, aes(x = tahun, y = sst)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SST Nina 3.4') +
labs(title="Time Series Index SST Nina 3.4", subtitle="https://www.cpc.ncep.noaa.gov/data/indices/sstoi.indices") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# visualisasi scatter plot time series belum memperhatikan pola musiman dan autokorelasi
# Data time series SST Nina 3.4
ggplot(data = enso2, aes(x = tanggal, y = sst)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SST Nina 3.4') +
labs(title="Time Series Index SST Nina 3.4", subtitle="https://www.cpc.ncep.noaa.gov/data/indices/sstoi.indices") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Data time series SOI
ggplot(data = enso2, aes(x = tahun, y = soi)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index SOI') +
labs(title="Time Series Index SOI", subtitle="http://www.bom.gov.au/climate/current/soihtm1.shtml") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Data time series ONI
ggplot(data = enso2, aes(x = tanggal, y = oni)) +
geom_line(color = "#00AFBB", size = 1) +
xlab('Tahun')+ ylab('Index ONI') +
labs(title="Time Series Index ONI", subtitle="https://origin.cpc.ncep.noaa.gov/products/analysis_monitoring/ensostuff/ONI_v5.php") +
scale_x_date(labels = function(x) format(x, "%d-%b-%Y"))
# Visualisasi data dengan fungsi autokorelasi
acf(enso2$sst, main="Index SST Nina 3.4")
acf(enso2$soi, main="Index SOI")
acf(enso2$oni, main="Index ONI")
# Visualisasi data dengan fungsi autokorelasi parsial
pacf(enso2$sst, main="Index SST Nina 3.4")
pacf(enso2$soi, main="Index SOI")
pacf(enso2$oni, main="Index ONI")
# PROGRAM
# Melakukan cek stasioneritas data menggunakan Uji-Augmented Dickey Fuller
library(readxl)
library(tseries)
# DEKLARASI fungsi-fungsi yang akan digunakan
normalize <- function(x) {
if(is.numeric(x)) {
x = (x - min(x)) / (max(x) - min(x))
} else{
print("Inputan data harus numerik")
}
return(x)
}
# ALGORITMA -input dataset
df <- read_excel("D:/Belajar Python/dataset/dataset tesis/dataset.xlsx")
df
df <- data.frame(
tanggal = as.Date(df$tanggal, format = "%Y/%m/%d"),
hotspot_riau = normalize(as.numeric(df$hotspot_riau)),
hotspot_sumsel = normalize(as.numeric(df$hotspot_sumsel)),
sst = normalize(as.numeric(df$sst)),
soi = normalize(as.numeric(df$soi)),
oni = normalize(as.numeric(df$oni))
)
# ALGORITMA - PROSES Uji-Augmented Dickey Fuller
df
adf.test(df$hotspot_riau)
install.packages("timeSeries")
# PROGRAM
# Melakukan cek stasioneritas data menggunakan Uji-Augmented Dickey Fuller
library(readxl)
library(tseries)
# DEKLARASI fungsi-fungsi yang akan digunakan
normalize <- function(x) {
if(is.numeric(x)) {
x = (x - min(x)) / (max(x) - min(x))
} else{
print("Inputan data harus numerik")
}
return(x)
}
# ALGORITMA -input dataset
df <- read_excel("D:/Belajar Python/dataset/dataset tesis/dataset.xlsx")
df
df <- data.frame(
hotspot_riau = normalize(as.numeric(df$hotspot_riau)),
hotspot_sumsel = normalize(as.numeric(df$hotspot_sumsel)),
sst = normalize(as.numeric(df$sst)),
soi = normalize(as.numeric(df$soi)),
oni = normalize(as.numeric(df$oni))
)
# ALGORITMA - PROSES Uji-Augmented Dickey Fuller
df
# konversi data kedalam bentuk numeric -> time series
str (df$hotspot_riau)
# konversi data kedalam bentuk numeric -> time series
hotspot_riau <- as.ts(df$hotspot_riau)
str(hotspot_riau)
df
hotspot_sumsel <- as.ts(df$hotspot_sumsel)
str(hotspot_sumsel)
sst <- as.ts(df$sst)
str(sst)
soi <- as.ts(df$soi)
str(soi)
oni <- as.ts(df$oni)
str(oni)
# ALGORITMA - PROSES Uji-Augmented Dickey Fuller
adf.test(hotspot_riau)
adf.test(hotspot_sst)
adf.test(sst)
adf.test(sst)
adf.test(sst)
adf.test(soi)
adf.test(oni)
adf.test(sst)
adf.test(sst, alternative = 'stationary')
adf.test(sst, alternative = 'stationary', k='1')
adf.test(sst, alternative = 'stationary', k=1)
adf.test(sst, alternative = 'stationary', k=10)
adf.test(sst, alternative = 'stationary', k=16)
adf.test(sst, alternative = 'stationary', k=2)
adf.test(sst, alternative = 'stationary', k=3)
adf.test(sst, alternative = 'stationary', k=6)
adf.test(sst, alternative = 'stationary', k=7)
data(ToothGrowth)
data(PlantGrowth)
a <- data(ToothGrowth)
a
